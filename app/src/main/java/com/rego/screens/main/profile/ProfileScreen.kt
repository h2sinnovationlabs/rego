package com.rego.screens.main.profileimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.borderimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.offsetimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material3.Cardimport androidx.compose.material3.CardDefaultsimport androidx.compose.material3.Dividerimport androidx.compose.material3.Iconimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport com.rego.Rimport com.rego.screens.base.DefaultScreenUIimport com.rego.screens.components.LabelValuePairimport com.rego.screens.main.home.BottomNavBarimport com.rego.ui.theme.Color00954Dimport com.rego.ui.theme.Color1A1A1A_16import com.rego.ui.theme.NativeAndroidBaseArchitectureThemeimport com.rego.ui.theme.fontMediumPoppinsimport com.rego.ui.theme.fontSemiBoldMontserratimport com.rego.ui.theme.fontSemiBoldPoppins@Composablefun ProfileScreen(    name: String = "Ayush Singh",    initialPasswordMasked: Boolean = true,    phone: String = "+91 701018897",    email: String = "ayush12@icici.com",    customerId: String = "ICI01",    password: String = "*********",    onBackClick: () -> Unit = {},    onChangePasswordClick: () -> Unit = {},    onTogglePasswordMask: (Boolean) -> Unit = {},    onHomeClick: () -> Unit,) {    var passwordMasked by remember { mutableStateOf(initialPasswordMasked) }    Box(        modifier = Modifier.fillMaxWidth()    ) {        DefaultScreenUI { paddingValues ->            // HEADER            Box(                modifier = Modifier                    .fillMaxWidth()                    .height(200.dp)                    .background(                        Color00954D,                        shape = RoundedCornerShape(bottomEnd = 12.dp, bottomStart = 12.dp)                    )                    .padding(top = 0.dp, bottom = 48.dp)            ) {                // AppBar - back arrow and title                Row(                    modifier = Modifier                        .fillMaxWidth()                        .padding(                            top = paddingValues.calculateTopPadding(),                            start = 14.dp,                            end = 14.dp                        ),                    verticalAlignment = Alignment.CenterVertically,                ) {                    Icon(                        painter = painterResource(id = R.drawable.back),                        contentDescription = "Back",                        tint = Color.White,                        modifier = Modifier                            .size(22.dp)                            .clickable { onBackClick() }                    )                    Text(                        text = "  My Account",                        style = fontMediumPoppins().copy(fontSize = 17.sp),                        color = Color.White,                    )                }                // Avatar (centered at the bottom of green area)                Box(                    modifier = Modifier                        .align(Alignment.BottomCenter)                        .offset(y = 70.dp)                ) {                    Box(                        modifier = Modifier                            .size(56.dp)                            .clip(CircleShape)                            .background(Color.White)                            .border(width = 2.dp, color = Color00954D, shape = CircleShape),                        contentAlignment = Alignment.Center                    ) {                        Text(                            text = name.take(1),                            style = fontSemiBoldPoppins().copy(fontSize = 23.sp),                            color = Color00954D,                            textAlign = TextAlign.Center                        )                    }                }            }            Spacer(modifier = Modifier.height(38.dp))            // Name            Text(                text = name,                color = Color(0xFF222222),                style = fontSemiBoldMontserrat().copy(fontSize = 16.sp),                textAlign = TextAlign.Center,                modifier = Modifier                    .fillMaxWidth()            )            Spacer(modifier = Modifier.height(18.dp))            // Info Card            Card(                modifier = Modifier                    .padding(horizontal = 16.dp)                    .fillMaxWidth(),                elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),                shape = RoundedCornerShape(14.dp),                colors = CardDefaults.cardColors(containerColor = Color.White)            ) {                Column(modifier = Modifier.fillMaxWidth()) {                    Spacer(modifier = Modifier.height(4.dp))                    LabelValuePair(                        label = "Phone Number",                        value = phone,                    )                    Divider(color = Color1A1A1A_16(), thickness = 1.dp)                    LabelValuePair(                        label = "Email Id",                        value = email,                    )                    Divider(color = Color1A1A1A_16(), thickness = 1.dp)                    LabelValuePair(                        label = "Customer Id",                        value = customerId,                    )                    Divider(color = Color1A1A1A_16(), thickness = 1.dp)                    LabelValuePair(                        label = "Password",                        value = if (passwordMasked) "*********" else "mySecretPWD",                        trailing = {                            Row(                                verticalAlignment = Alignment.CenterVertically,                                modifier = Modifier                            ) {                                Icon(                                    painter = painterResource(id = R.drawable.password_view),                                    contentDescription = "Toggle password",                                    tint = Color00954D,                                    modifier = Modifier                                        .size(22.dp)                                        .clickable {                                            passwordMasked = !passwordMasked                                            onTogglePasswordMask(passwordMasked)                                        }                                )                                Spacer(modifier = Modifier.weight(1f))                                Text(                                    text = "Change Password",                                    color = Color00954D,                                    style = fontMediumPoppins().copy(fontSize = 10.sp),                                    modifier = Modifier                                        .clickable { onChangePasswordClick() }                                )                            }                        }                    )                }            }        }        BottomNavBar(            modifier = Modifier                .align(Alignment.BottomEnd)                .fillMaxWidth(),            onHomeClick = onHomeClick,            isProfileSelected = true,            onProfileClick = {            }        )    }}@Preview@Composablefun ProfileScreenPreview() {    NativeAndroidBaseArchitectureTheme {        ProfileScreen { }    }}